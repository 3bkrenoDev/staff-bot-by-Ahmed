const Canvas = require('canvas');
const editor = require("editor-canvas");
let background1 = "./profile_staff.png";
module.exports = {
  createLevelCanvas: async (member, xp, xpNeed, level, xpNeeed) => {
    var _0xa108 = ["\x63\x72\x65\x61\x74\x65\x43\x61\x6E\x76\x61\x73", "\x32\x64", "\x67\x65\x74\x43\x6F\x6E\x74\x65\x78\x74", "\x6C\x6F\x61\x64\x49\x6D\x61\x67\x65", "\x77\x69\x64\x74\x68", "\x68\x65\x69\x67\x68\x74", "\x64\x72\x61\x77\x49\x6D\x61\x67\x65", "\x66\x6F\x6E\x74", "\x33\x30\x70\x78\x20\x61\x68\x6D\x65\x64", "\x66\x69\x6C\x6C\x53\x74\x79\x6C\x65", "\x77\x68\x69\x74\x65", "\x74\x65\x78\x74\x41\x6C\x69\x67\x6E", "\x63\x65\x6E\x74\x65\x72", "\x75\x73\x65\x72\x6E\x61\x6D\x65", "\x75\x73\x65\x72", "\x73\x70\x6C\x69\x74\x54\x65\x78\x74", "", "\x66\x69\x6C\x6C\x54\x65\x78\x74", "\x62\x65\x67\x69\x6E\x50\x61\x74\x68", "\x6C\x69\x6E\x65\x57\x69\x64\x74\x68", "\x35", "\x73\x74\x72\x6F\x6B\x65\x53\x74\x79\x6C\x65", "\x23\x31\x65\x37\x64\x65\x61", "\x6D\x6F\x76\x65\x54\x6F", "\x6C\x69\x6E\x65\x54\x6F", "\x73\x74\x72\x6F\x6B\x65", "\x32\x35\x70\x78\x20\x61\x68\x6D\x65\x64", "\x6C\x65\x66\x74", "\x45\x58\x50\x3A\x20", "\x43\x55\x52\x52\x45\x4E\x54\x20\x4C\x45\x56\x45\x4C\x3A\x20", "\x2F", "\x4C\x45\x56\x45\x4C\x3A\x20", "\x4E\x45\x58\x54\x20\x4C\x45\x56\x45\x4C\x20\x49\x4E\x3A\x20", "\x6A\x70\x67", "\x64\x69\x73\x70\x6C\x61\x79\x41\x76\x61\x74\x61\x72\x55\x52\x4C", "\x64\x72\x61\x77\x53\x71\x75\x61\x72\x65"]; let canvas = Canvas[_0xa108[0]](885, 284); let ctx = canvas[_0xa108[2]](_0xa108[1]); let background = await Canvas[_0xa108[3]](background1); ctx[_0xa108[6]](background, 0, 0, canvas[_0xa108[4]], canvas[_0xa108[5]]); ctx[_0xa108[7]] = _0xa108[8]; ctx[_0xa108[9]] = _0xa108[10]; ctx[_0xa108[11]] = _0xa108[12]; var username = editor[_0xa108[15]](ctx, { text: member[_0xa108[14]][_0xa108[13]], width: 450, maxLine: 1 }); ctx[_0xa108[17]](`${_0xa108[16]}${username}${_0xa108[16]}`, (canvas[_0xa108[4]] + 43 + 200 + 20) / 2, 75); ctx[_0xa108[18]](); ctx[_0xa108[19]] = _0xa108[20]; ctx[_0xa108[21]] = _0xa108[22]; ctx[_0xa108[23]](300, 90); ctx[_0xa108[24]](canvas[_0xa108[4]] - 35, 90); ctx[_0xa108[25]](); ctx[_0xa108[7]] = _0xa108[26]; ctx[_0xa108[11]] = _0xa108[27]; ctx[_0xa108[17]](`${_0xa108[28]}${xp}${_0xa108[16]}`, 300, 120); ctx[_0xa108[17]](`${_0xa108[29]}${xp}${_0xa108[30]}${xpNeed}${_0xa108[16]}`, 300, 160); ctx[_0xa108[17]](`${_0xa108[31]}${level}${_0xa108[16]}`, 300, 200); ctx[_0xa108[17]](`${_0xa108[32]}${xpNeeed}${_0xa108[16]}`, 300, 240); let avatar = member[_0xa108[14]][_0xa108[34]]({ format: _0xa108[33] }); avatar = await editor[_0xa108[35]]({ image: avatar, curve: 50, stroke: _0xa108[22], weight: 20, angle: 10 }); avatar = await Canvas[_0xa108[3]](avatar); ctx[_0xa108[6]](avatar, 50, 40, 200, 200); return canvas
  },
  splitMessage: (text, { maxLength = 60, char = '\n', prepend = '', append = '' } = {}) => {
    var _0xd747 = ["\x72\x65\x73\x6F\x6C\x76\x65\x53\x74\x72\x69\x6E\x67", "\x65\x78\x70\x6F\x72\x74\x73", "\x6C\x65\x6E\x67\x74\x68", "\x73\x70\x6C\x69\x74", "\x73\x6F\x6D\x65", "\x53\x50\x4C\x49\x54\x5F\x4D\x41\x58\x5F\x4C\x45\x4E", "", "\x70\x75\x73\x68", "\x66\x69\x6C\x74\x65\x72", "\x63\x6F\x6E\x63\x61\x74"]; text = module[_0xd747[1]][_0xd747[0]](text); if (text[_0xd747[2]] <= maxLength) { return [text] }; const splitText = text[_0xd747[3]](char); if (splitText[_0xd747[4]]((chunk) => { return chunk[_0xd747[2]] > maxLength })) { throw new RangeError(_0xd747[5]) }; const messages = []; let msg = _0xd747[6]; for (const chunk of splitText) { if (msg && (msg + char + chunk + append)[_0xd747[2]] > maxLength) { messages[_0xd747[7]](msg + append); msg = prepend }; msg += (msg && msg !== prepend ? char : _0xd747[6]) + chunk }; return messages[_0xd747[9]](msg)[_0xd747[8]]((_0x37ffx5) => { return _0x37ffx5 })
  },
  resolveString: (data) => {
    var _0x77c0 = ["\x73\x74\x72\x69\x6E\x67", "\x69\x73\x41\x72\x72\x61\x79", "\x0A", "\x6A\x6F\x69\x6E"]; if (typeof data === _0x77c0[0]) { return data }; if (Array[_0x77c0[1]](data)) { return data[_0x77c0[3]](_0x77c0[2]) }; return String(data)
  },
}